{"ast":null,"code":"import lscache from 'lscache';\n\nif (process.env.NODE_ENV !== 'production') {\n  lscache.enableWarnings(true);\n}\n\nconst storage = {};\n\nconst lsCache = (action, key, data) => {\n  if (lscache.supported()) {\n    return lscache[action](key, data);\n  } else {\n    console.log('Local storage is not supported');\n  }\n};\n\nstorage.set = (key, data) => lsCache('set', key, data);\n\nstorage.get = key => lsCache('get', key);\n\nstorage.remove = key => lsCache('remove', key);\n\nstorage.flush = () => lsCache('flush');\n\nexport default storage;","map":{"version":3,"sources":["/Users/burcueren/BSS1/src/utils/storageService.js"],"names":["lscache","process","env","NODE_ENV","enableWarnings","storage","lsCache","action","key","data","supported","console","log","set","get","remove","flush"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCH,EAAAA,OAAO,CAACI,cAAR,CAAuB,IAAvB;AACH;;AAED,MAAMC,OAAO,GAAG,EAAhB;;AAEA,MAAMC,OAAO,GAAG,CAACC,MAAD,EAASC,GAAT,EAAcC,IAAd,KAAuB;AACnC,MAAIT,OAAO,CAACU,SAAR,EAAJ,EAAyB;AACrB,WAAOV,OAAO,CAACO,MAAD,CAAP,CAAgBC,GAAhB,EAAqBC,IAArB,CAAP;AACH,GAFD,MAEO;AACHE,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACH;AACJ,CAND;;AAQAP,OAAO,CAACQ,GAAR,GAAc,CAACL,GAAD,EAAMC,IAAN,KAAeH,OAAO,CAAC,KAAD,EAAQE,GAAR,EAAaC,IAAb,CAApC;;AAEAJ,OAAO,CAACS,GAAR,GAAcN,GAAG,IAAIF,OAAO,CAAC,KAAD,EAAQE,GAAR,CAA5B;;AAEAH,OAAO,CAACU,MAAR,GAAiBP,GAAG,IAAIF,OAAO,CAAC,QAAD,EAAWE,GAAX,CAA/B;;AAEAH,OAAO,CAACW,KAAR,GAAgB,MAAMV,OAAO,CAAC,OAAD,CAA7B;;AAEA,eAAeD,OAAf","sourcesContent":["import lscache from 'lscache';\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n    lscache.enableWarnings(true);\r\n}\r\n\r\nconst storage = {};\r\n\r\nconst lsCache = (action, key, data) => {\r\n    if (lscache.supported()) {\r\n        return lscache[action](key, data);\r\n    } else {\r\n        console.log('Local storage is not supported');\r\n    }\r\n};\r\n\r\nstorage.set = (key, data) => lsCache('set', key, data);\r\n\r\nstorage.get = key => lsCache('get', key);\r\n\r\nstorage.remove = key => lsCache('remove', key);\r\n\r\nstorage.flush = () => lsCache('flush');\r\n\r\nexport default storage;"]},"metadata":{},"sourceType":"module"}