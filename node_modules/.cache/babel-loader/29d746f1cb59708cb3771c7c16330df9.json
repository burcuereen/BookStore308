{"ast":null,"code":"var _jsxFileName = \"/Users/burcueren/BSS1/src/components/Popup/Popup.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { Dialog, DialogTitle, DialogActions, DialogContent, Typography, IconButton, makeStyles } from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui//icons/Close\";\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  closeIcon: {\n    position: \"absolute\",\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n    width: 'auto'\n  },\n  modalContent: {\n    outline: 'none'\n  },\n  title: {\n    marginRight: theme.spacing(5)\n  }\n}));\nexport const usePopup = () => {\n  _s();\n\n  const [open, setOpen] = useState(false);\n\n  const togglePopup = () => setOpen(prev => !prev);\n\n  return {\n    open,\n    togglePopup\n  };\n};\n\n_s(usePopup, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\nexport const Popup = props => {\n  _s2();\n\n  const {\n    open,\n    togglePopup,\n    children,\n    buttons,\n    title,\n    customHeader,\n    customFooter,\n    closeIcon = true,\n    autoClose = true,\n    scroll = 'paper',\n    maxWidth = 'sm',\n    dividers = true,\n    fullWidth = false\n  } = props;\n  const descriptionElementRef = useRef(null);\n  const classes = useStyles();\n  useEffect(() => {\n    if (open) {\n      const {\n        current: descriptionElement\n      } = descriptionElementRef;\n\n      if (descriptionElement !== null) {\n        descriptionElement.focus();\n      }\n    }\n  }, [open]);\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    onClose: autoClose && togglePopup,\n    scroll: scroll,\n    fullWidth: fullWidth,\n    maxWidth: maxWidth,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      disableTypography: true,\n      children: [customHeader || /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        align: \"center\",\n        className: classes.title,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 34\n      }, this), closeIcon && /*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"close\",\n        className: classes.closeIcon,\n        onClick: togglePopup,\n        children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      dividers: dividers,\n      ref: descriptionElementRef,\n      tabIndex: -1,\n      className: classes.modalContent,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), buttons ? /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: buttons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 18\n    }, this) : customFooter]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Popup, \"cLWamUYq7oihfJLoBdJ1JwI/S4M=\", false, function () {\n  return [useStyles];\n});\n\n_c = Popup;\nPopup.propsTypes = {\n  title: PropTypes.string,\n  closeIcon: PropTypes.bool,\n  autoClose: PropTypes.bool,\n  scroll: PropTypes.oneOf(['paper', 'body']),\n  maxWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n  dividers: PropTypes.bool,\n  buttons: PropTypes.element,\n  children: PropTypes.node.isRequired,\n  togglePopup: PropTypes.func,\n  open: PropTypes.bool\n};\nPopup.defaultProps = {\n  title: 'Title',\n  closeIcon: true,\n  autoClose: true,\n  scroll: 'paper',\n  maxWidth: 'sm',\n  dividers: true\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Popup\");","map":{"version":3,"sources":["/Users/burcueren/BSS1/src/components/Popup/Popup.js"],"names":["useState","useEffect","useRef","Dialog","DialogTitle","DialogActions","DialogContent","Typography","IconButton","makeStyles","CloseIcon","PropTypes","useStyles","theme","closeIcon","position","right","spacing","top","color","palette","grey","width","modalContent","outline","title","marginRight","usePopup","open","setOpen","togglePopup","prev","Popup","props","children","buttons","customHeader","customFooter","autoClose","scroll","maxWidth","dividers","fullWidth","descriptionElementRef","classes","current","descriptionElement","focus","propsTypes","string","bool","oneOf","element","node","isRequired","func","defaultProps"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport { Dialog, DialogTitle, DialogActions, DialogContent, Typography, IconButton, makeStyles, } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui//icons/Close\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    closeIcon: {\r\n        position: \"absolute\",\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n        width: 'auto',\r\n    },\r\n    modalContent: {\r\n        outline: 'none',\r\n    },\r\n    title: {\r\n        marginRight: theme.spacing(5),\r\n    },\r\n}));\r\n\r\nexport const usePopup = () => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const togglePopup = () => setOpen(prev => !prev)\r\n\r\n    return {\r\n        open,\r\n        togglePopup\r\n    }\r\n}\r\n\r\nexport const Popup = (props) => {\r\n\r\n    const {\r\n        open,\r\n        togglePopup,\r\n        children,\r\n        buttons,\r\n        title,\r\n        customHeader,\r\n        customFooter,\r\n        closeIcon = true,\r\n        autoClose = true,\r\n        scroll = 'paper',\r\n        maxWidth = 'sm',\r\n        dividers = true,\r\n        fullWidth = false\r\n    } = props\r\n\r\n    const descriptionElementRef = useRef(null);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            const { current: descriptionElement } = descriptionElementRef;\r\n            if (descriptionElement !== null) {\r\n                descriptionElement.focus();\r\n            }\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={autoClose && togglePopup}\r\n            scroll={scroll}\r\n            fullWidth={fullWidth}\r\n            maxWidth={maxWidth}\r\n        >\r\n            <DialogTitle disableTypography >\r\n                {customHeader || <Typography variant=\"h6\" align='center' className={classes.title}>{title}</Typography>}\r\n                {closeIcon &&\r\n                    <IconButton\r\n                        aria-label=\"close\"\r\n                        className={classes.closeIcon}\r\n                        onClick={togglePopup}\r\n                    >\r\n                        <CloseIcon />\r\n                    </IconButton>}\r\n            </DialogTitle>\r\n            <DialogContent\r\n                dividers={dividers}\r\n                ref={descriptionElementRef}\r\n                tabIndex={-1}\r\n                className={classes.modalContent}\r\n            >\r\n                {children}\r\n            </DialogContent>\r\n            {   buttons ?\r\n                (<DialogActions>\r\n                    {buttons}\r\n                </DialogActions>) :\r\n                customFooter\r\n            }\r\n        </Dialog >\r\n    );\r\n}\r\n\r\nPopup.propsTypes = {\r\n    title: PropTypes.string,\r\n    closeIcon: PropTypes.bool,\r\n    autoClose: PropTypes.bool,\r\n    scroll: PropTypes.oneOf(['paper', 'body']),\r\n    maxWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\r\n    dividers: PropTypes.bool,\r\n    buttons: PropTypes.element,\r\n    children: PropTypes.node.isRequired,\r\n    togglePopup: PropTypes.func,\r\n    open: PropTypes.bool,\r\n\r\n}\r\nPopup.defaultProps = {\r\n    title: 'Title',\r\n    closeIcon: true,\r\n    autoClose: true,\r\n    scroll: 'paper',\r\n    maxWidth: 'sm',\r\n    dividers: true\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}