"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var commander = require("commander");
var hay_1 = require("./hay");
var commands_1 = require("./commands");
var pkgInfo = require('../package.json');
var startTime = Date.now();
var _a = process.argv, node = _a[0], hayCmd = _a[1], name = _a[2], endArgs = _a.slice(3);
var dividerIndex = endArgs.indexOf('--');
var args = endArgs.splice(0, dividerIndex === -1 ? endArgs.length : dividerIndex);
if (dividerIndex > -1) {
    endArgs.shift();
}
commander.version(pkgInfo.version);
commander.usage('[command] [flags]');
commander.option('--config <file>', 'config file');
commander.option('--destination <dir>', 'output directory');
commander.option('--no-progress', 'removes progress bar from output');
commander.option('--posts-dir <dir>', 'posts directory');
commander.option('--quiet', ' only show errors in console');
commander.option('--source <dir>', 'source directory to build from');
var commandName = '';
var helpCommands = ['help', '--help', '-h'];
if (helpCommands.includes(name)) {
    name = 'help';
    if (args.length) {
        commander.on('--help', function () {
            console.log("hello " + name);
        });
    }
    else {
        commander.on('--help', function () {
            console.log("hi");
        });
    }
    name = args.shift();
    args.push('--help');
}
commandName = commands_1.aliases[name] || name || 'bale';
var command = commands_1.commands[commandName];
(command && command.options) && command.options(commander);
if (commandName === 'help' || args.includes('--help') || args.includes('-h')) {
    commander.parse([node, hayCmd, commandName].concat(args));
    commander.help();
    process.exit(1);
}
commander.parse([node, hayCmd, commandName].concat(args));
commander.args = commander.args.concat(endArgs);
if (!command) {
    var NoCommand = (function () {
        function NoCommand() {
        }
        NoCommand.prototype.run = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, Promise.reject("Command " + commandName + " not found")];
                });
            });
        };
        return NoCommand;
    }());
    command = NoCommand;
}
var hay = new hay_1.Hay(commander);
if (command && commandName !== name && name) {
    hay.reporter.log("<dim>Using " + commandName + " (alias " + name + " => " + commandName + ")</dim>");
}
hay.reporter.log("<bold>" + pkgInfo.name + " " + commandName + " v" + pkgInfo.version + "</bold>");
hay
    .config
    .loadConfig(commander)
    .then(function () { return hay.run(command, startTime); })
    .catch(function (err) { return console.error(err); });
//# sourceMappingURL=cli.js.map