"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var path = require("path");
var glob = require("glob");
var base_1 = require("./base");
var CopyBuilder = (function (_super) {
    __extends(CopyBuilder, _super);
    function CopyBuilder(hay) {
        var _this = _super.call(this, hay) || this;
        _this.progressBar = _this.hay.reporter.createProgressBar();
        _super.prototype.setConfig.call(_this, {
            name: 'file',
            directory: hay.config.values.source,
            fileExtensions: []
        });
        return _this;
    }
    CopyBuilder.prototype.loadOtherFiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var config;
            return __generator(this, function (_a) {
                config = this.hay.config.values;
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        new glob.Glob(path.join('**/*'), {
                            cwd: config.source,
                            nodir: true,
                            ignore: [
                                path.relative(config.source, config.partialsDir) + '/**/*',
                                path.relative(config.source, config.postsDir) + '/**/*',
                                path.relative(config.source, config.layoutsDir) + '/**/*'
                            ].concat(config.exclude)
                        }, function (err, matches) {
                            if (err)
                                reject(err);
                            resolve(matches);
                        });
                    })];
            });
        });
    };
    CopyBuilder.prototype.parseOtherFile = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var config, fileSystem, mdExtensions, info, extensions, baseName, contents, parsedHeader, parsed, output, destinationFolder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = this.hay.config.values;
                        fileSystem = this.hay.fileSystem;
                        mdExtensions = config.markdownExtensions;
                        info = {
                            fileName: file,
                            output: {
                                directory: path.dirname(file),
                                fileName: path.basename(file)
                            },
                            shortName: this.hay.fileSystem.removeExtension(file),
                            fileExt: this.hay.fileSystem.getFileExtension(file)
                        };
                        extensions = config.layoutExtensions.concat(config.markdownExtensions, config.partialExtensions);
                        if (!extensions.includes(info.fileExt))
                            return [3 /*break*/, 8];
                        baseName = path.basename(file, path.extname(file));
                        return [4 /*yield*/, this.hay.fileSystem.readFile(path.resolve(config.source, file))];
                    case 1:
                        contents = _a.sent();
                        return [4 /*yield*/, this.hay.engine.parseFile(contents, file)];
                    case 2: return [4 /*yield*/, _a.sent()];
                    case 3:
                        parsedHeader = _a.sent();
                        info.contents = parsedHeader.contents;
                        info.options = parsedHeader.options;
                        if (baseName !== 'index' && parsedHeader.options.permalink) {
                            info.output.directory = parsedHeader.options.permalink;
                            info.output.fileName = 'index.html';
                        }
                        return [4 /*yield*/, this.hay.engine.compileTemplate(info)];
                    case 4:
                        parsed = _a.sent();
                        return [4 /*yield*/, parsed.render(info)];
                    case 5:
                        output = _a.sent();
                        destinationFolder = path.resolve(config.destination, info.output.directory);
                        return [4 /*yield*/, fileSystem.mkDir(destinationFolder)];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, fileSystem.writeFile(path.resolve(destinationFolder, info.output.fileName), output)];
                    case 7:
                        _a.sent();
                        this.progressBar.tick("compiled " + file);
                        return [3 /*break*/, 10];
                    case 8: return [4 /*yield*/, fileSystem.copy(path.resolve(config.source, file), path.resolve(config.destination, info.output.directory, info.output.fileName))];
                    case 9:
                        _a.sent();
                        this.progressBar.tick("copied " + file);
                        _a.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    CopyBuilder.prototype.removeFile = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var shortName;
            return __generator(this, function (_a) {
                shortName = path.basename(file.fileName);
                return [2 /*return*/];
            });
        });
    };
    CopyBuilder.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var files;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadOtherFiles()];
                    case 1:
                        files = _a.sent();
                        this.progressBar.setLength(files.length - 1);
                        this.progressBar.setCategory("copy files");
                        this.progressBar.start();
                        return [2 /*return*/, Promise.all(files.map(function (file) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.parseOtherFile(file)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); }))];
                }
            });
        });
    };
    CopyBuilder.prototype.finish = function () {
        this.hay.reporter.finish("<green>\u2713</green>  copied files");
    };
    return CopyBuilder;
}(base_1.BaseBuilder));
exports.CopyBuilder = CopyBuilder;
//# sourceMappingURL=copy.js.map