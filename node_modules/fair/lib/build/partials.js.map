{"version":3,"file":"partials.js","sourceRoot":"","sources":["../../src/build/partials.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2BAA6B;AAE7B,+BAAqC;AAIrC;IAAqC,mCAAW;IAG9C,yBAAY,GAAQ;QAApB,YACE,kBAAM,GAAG,CAAC,SAOX;QALC,iBAAM,SAAS,aAAC;YACd,IAAI,EAAE,SAAS;YACf,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW;YACxC,cAAc,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB;SACpD,CAAC,CAAC;;IACL,CAAC;IAEK,mCAAS,GAAf,UAAgB,IAAU;;gBACpB,IAAI;;;4BAAa,MAAM,eAAA,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,EAAA;;;wBAC5D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;wBAEtB,MAAM,eAAA,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,EAAA;;wBAA3C,UAA4C;;;;;KAC7C;IAEK,oCAAU,GAAhB,UAAiB,IAAU;;gBACrB,SAAS;;4BAAW,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;;;;KACrD;IAEK,6BAAG,GAAT;;;gBACM,KAAK;;;4BAAW,MAAM,eAAA,iBAAM,SAAS,WAAE,EAAA;;;wBAE3C,MAAM,gBAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAO,IAAU;;4CAAK,MAAM,eAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAA;4CAA1B,MAAM,2BAAoB;;qCAAA,CAAC,CAAC,EAAC;;;;KACjF;IAEM,gCAAM,GAAb;QACE,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,0CAAqC,CAAC,CAAC;IAClE,CAAC;IACH,sBAAC;AAAD,CAAC,AAjCD,CAAqC,kBAAW,GAiC/C;AAjCY,0CAAe","sourcesContent":["import * as path from 'path';\n\nimport { BaseBuilder } from './base';\nimport { File, FileInfo } from '../template';\nimport { Hay } from '../hay';\n\nexport class PartialsBuilder extends BaseBuilder {\n  public template: string;\n\n  constructor(hay: Hay) {\n    super(hay);\n\n    super.setConfig({\n      name: 'partial',\n      directory: hay.config.values.partialsDir,\n      fileExtensions: hay.config.values.partialExtensions\n    });\n  }\n\n  async parseFile(file: File): Promise<any> {\n    let info: FileInfo = await this.hay.engine.extractInfo(file);\n    info.noCompile = true;\n\n    await this.hay.engine.compileTemplate(info);\n  }\n\n  async removeFile(file: File): Promise<any> {\n    let shortName: string = path.basename(file.fileName);\n  }\n\n  async run(): Promise<any> {\n    let files: File[] = await super.loadFiles();\n\n    return Promise.all(files.map(async (file: File) => await this.parseFile(file)));\n  }\n\n  public finish() {\n    this.hay.reporter.finish(`<green>âœ“</green>  gathered partials`);\n  }\n}\n"]}