{"version":3,"file":"copy.js","sourceRoot":"","sources":["../../src/build/copy.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as glob from 'glob';\n\nimport { BaseBuilder } from './base';\nimport { File, FileInfo, FileParsed } from '../template';\nimport { Hay } from '../hay';\nimport { ConfigValues } from '../config';\nimport { FileSystem } from '../file-system';\n\nexport class CopyBuilder extends BaseBuilder {\n  public template: string;\n\n  constructor(hay: Hay) {\n    super(hay);\n\n    this.progressBar = this.hay.reporter.createProgressBar();\n\n    super.setConfig({\n      name: 'file',\n      directory: hay.config.values.source,\n      fileExtensions: []\n    });\n  }\n\n  async loadOtherFiles(): Promise<string[]> {\n    let config: ConfigValues = this.hay.config.values;\n\n    return new Promise<string[]>((resolve, reject) => {\n      new glob.Glob(\n        path.join('**/*'),\n        {\n          cwd: config.source,\n          nodir: true,\n          ignore: [\n            path.relative(config.source, config.partialsDir) + '/**/*',\n            path.relative(config.source, config.postsDir) + '/**/*',\n            path.relative(config.source, config.layoutsDir) + '/**/*',\n            ...config.exclude\n          ]\n        },\n        function (err, matches) {\n          if (err) reject(err);\n\n          resolve(matches);\n        }\n      );\n    });\n  }\n\n  async parseOtherFile(file: string): Promise<any> {\n    // let info: FileInfo = await this.hay.engine.extractInfo(file);\n    // return this.hay.engine.parse(info);\n    const config: ConfigValues =  this.hay.config.values;\n    const fileSystem: FileSystem = this.hay.fileSystem;\n\n    let mdExtensions: string[] = config.markdownExtensions;\n\n    let info: FileInfo = {\n      fileName: file,\n      output: {\n        directory: path.dirname(file),\n        fileName: path.basename(file)\n      },\n      shortName: this.hay.fileSystem.removeExtension(file),\n      fileExt: this.hay.fileSystem.getFileExtension(file)\n    };\n\n    let extensions: string[] = [\n      ...config.layoutExtensions,\n      ...config.markdownExtensions,\n      ...config.partialExtensions\n    ];\n\n    if (extensions.includes(<string>info.fileExt)) {\n      let baseName: string = path.basename(file, path.extname(file));\n      let contents: string = await this.hay.fileSystem.readFile(path.resolve(config.source, file));\n\n      let parsedHeader: FileParsed = await await this.hay.engine.parseFile(contents, file);\n\n      info.contents = parsedHeader.contents;\n      info.options = parsedHeader.options;\n\n      if (baseName !== 'index' && parsedHeader.options.permalink) {\n        info.output.directory = parsedHeader.options.permalink;\n        info.output.fileName = 'index.html';\n      }\n\n      let parsed: any = await this.hay.engine.compileTemplate(info);\n      let output: string = await parsed.render(info);\n\n      const destinationFolder: string = path.resolve(config.destination, info.output.directory);\n\n      await fileSystem.mkDir(destinationFolder);\n      await fileSystem.writeFile(\n        path.resolve(destinationFolder, info.output.fileName),\n        output\n      );\n\n      this.progressBar.tick(`compiled ${file}`);\n    } else {\n      await fileSystem.copy(\n        path.resolve(config.source, file),\n        path.resolve(config.destination, info.output.directory, info.output.fileName)\n      );\n\n      this.progressBar.tick(`copied ${file}`);\n    }\n  }\n\n  async removeFile(file: File): Promise<any> {\n    let shortName: string = path.basename(file.fileName);\n  }\n\n  async run(): Promise<any> {\n    let files: string[] = await this.loadOtherFiles();\n\n    this.progressBar.setLength(files.length - 1);\n    this.progressBar.setCategory(`copy files`);\n    this.progressBar.start();\n\n    return Promise.all(files.map(async (file: string) => await this.parseOtherFile(file)));\n  }\n\n  public finish() {\n    this.hay.reporter.finish(`<green>âœ“</green>  copied files`);\n  }\n}\n"]}