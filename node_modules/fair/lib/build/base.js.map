{"version":3,"file":"base.js","sourceRoot":"","sources":["../../src/build/base.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2BAA6B;AAY7B;IAKE,qBAAmB,GAAQ;QAAR,QAAG,GAAH,GAAG,CAAK;QAFpB,oBAAe,GAAY,KAAK,CAAC;QAGtC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC;IAC3D,CAAC;IAIY,8BAAQ,GAArB,UAAsB,QAAgB;;;;gBACpC,MAAM,gBAAC,IAAI,CAAC,GAAG,CAAC,UAAU;yBACvB,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;yBACvD,IAAI,CAAC,UAAC,QAAgB;wBACrB,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAU,QAAU,CAAC,CAAC;wBAE5C,MAAM,CAAC;4BACL,QAAQ,UAAA;4BACR,QAAQ,UAAA;yBACT,CAAC;oBACJ,CAAC,CAAC,EAAC;;;KACN;IAEY,+BAAS,GAAtB;;;gBACM,KAAK;;;4BAAa,MAAM,eAAA,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAA;;;wBAC9E,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAEvE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBACzC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,UAAQ,IAAI,CAAC,MAAM,CAAC,IAAM,CAAC,CAAC;wBACzD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;wBAEzB,MAAM,gBAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAO,QAAgB;gCAAK,MAAM,gBAAN,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAA;qCAAA,CAAC,CAAC,EAAC;;;;KACpF;IAIM,+BAAS,GAAhB,UAAiB,MAAqB;QACpC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEO,qCAAe,GAAvB,UAAwB,UAAoB;QAA5C,iBAEC;QADC,MAAM,CAAC,UAAC,IAAY,IAAK,OAAA,UAAU,CAAC,QAAQ,CAAC,KAAI,CAAC,GAAG,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAA/D,CAA+D,CAAC;IAC3F,CAAC;IAGH,kBAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CqB,kCAAW","sourcesContent":["import * as path from 'path';\n\nimport { Hay } from '../hay';\nimport { File } from '../template';\nimport { ProgressBar } from '../reporter';\n\nexport type BuilderConfig = {\n  directory: string,\n  fileExtensions: string[],\n  name: string\n};\n\nexport abstract class BaseBuilder {\n  public config: BuilderConfig;\n  public progressBar: ProgressBar;\n  public WATCH_INITIATED: boolean = false;\n\n  constructor(public hay: Hay) {\n    this.progressBar = this.hay.reporter.createProgressBar();\n  }\n\n  public abstract finish(): void;\n\n  public async loadFile(fileName: string): Promise<File> {\n    return this.hay.fileSystem\n      .readFile(path.resolve(this.config.directory, fileName))\n      .then((contents: string): File => {\n        this.progressBar.tick(`loaded ${fileName}`);\n\n        return {\n          fileName,\n          contents\n        };\n      });\n  }\n\n  public async loadFiles(): Promise<File[]> {\n    let files: string[] = await this.hay.fileSystem.readDir(this.config.directory);\n    files = files.filter(this.checkExtensions(this.config.fileExtensions));\n\n    this.progressBar.setLength(files.length);\n    this.progressBar.setCategory(`load ${this.config.name}`);\n    this.progressBar.start();\n\n    return Promise.all(files.map(async (fileName: string) => this.loadFile(fileName)));\n  }\n\n  public abstract run(): any;\n\n  public setConfig(config: BuilderConfig) {\n    this.config = config;\n  }\n\n  private checkExtensions(extensions: string[]): (file: string) => boolean {\n    return (file: string) => extensions.includes(this.hay.fileSystem.getFileExtension(file));\n  }\n\n  async watch?(): Promise<void>;\n}\n"]}