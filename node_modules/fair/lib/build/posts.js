"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var path = require("path");
var chokidar = require("chokidar");
var base_1 = require("./base");
var FILENAME_DATE_REGEX = /^(\d{4})-(\d{2})-(\d{2})-([-\w]+?)\.(\w+)?$/i;
var POST_REGISTRY = new Map();
var PostBuilder = (function (_super) {
    __extends(PostBuilder, _super);
    function PostBuilder(hay) {
        var _this = _super.call(this, hay) || this;
        _super.prototype.setConfig.call(_this, {
            name: 'post',
            directory: hay.config.values.postsDir,
            fileExtensions: hay.config.values.postExtensions
        });
        return _this;
    }
    PostBuilder.prototype.parseFile = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var info, match, parsed, output, outputDir;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.hay.engine.extractInfo(file)];
                    case 1:
                        info = _a.sent();
                        match = FILENAME_DATE_REGEX.exec(file.fileName);
                        if (match) {
                            info.date = new Date(match.slice(1, 4).join('-'));
                            if (this.hay.config.values.autoPermalink) {
                                info.output.directory = match[4];
                                info.output.fileName = 'index.html';
                            }
                        }
                        else if (info.options && info.options.date) {
                            info.date = new Date(info.options.date);
                        }
                        return [4 /*yield*/, this.hay.engine.compileTemplate(info)];
                    case 2:
                        parsed = _a.sent();
                        return [4 /*yield*/, parsed.render(info)];
                    case 3:
                        output = _a.sent();
                        outputDir = path.resolve(this.hay.config.values.destination, info.output.directory);
                        POST_REGISTRY.set(file.fileName, path.resolve(outputDir, info.output.fileName));
                        return [4 /*yield*/, this.hay.fileSystem.mkDir(outputDir)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.hay.fileSystem.writeFile(path.resolve(outputDir, info.output.fileName), output)];
                    case 5:
                        _a.sent();
                        this.progressBar.tick("loaded " + file.fileName);
                        return [2 /*return*/];
                }
            });
        });
    };
    PostBuilder.prototype.removeFile = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var shortName;
            return __generator(this, function (_a) {
                shortName = path.basename(file.fileName);
                return [2 /*return*/];
            });
        });
    };
    PostBuilder.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var files;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.loadFiles.call(this)];
                    case 1:
                        files = _a.sent();
                        this.progressBar.setLength(files.length);
                        this.progressBar.setCategory("compile posts");
                        this.progressBar.start();
                        return [2 /*return*/, Promise.all(files.map(function (file) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.parseFile(file)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); }))];
                }
            });
        });
    };
    PostBuilder.prototype.finish = function () {
        this.hay.reporter.finish("<green>\u2713</green>  parsed posts");
    };
    PostBuilder.prototype.watch = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var watcher;
            return __generator(this, function (_a) {
                watcher = chokidar.watch(this.config.directory, {
                    ignored: /[\/\\]\./,
                    persistent: true,
                    cwd: this.config.directory
                });
                watcher
                    .on('add', function (changedFile) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this.WATCH_INITIATED) {
                                    return [2 /*return*/];
                                }
                                return [4 /*yield*/, this.addOrChange(changedFile)];
                            case 1:
                                _a.sent();
                                this.hay.reporter.finish("added " + changedFile);
                                return [2 /*return*/];
                        }
                    });
                }); })
                    .on('change', function (changedFile) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this.WATCH_INITIATED) {
                                    return [2 /*return*/];
                                }
                                return [4 /*yield*/, this.addOrChange(changedFile)];
                            case 1:
                                _a.sent();
                                this.hay.reporter.finish("updated " + changedFile);
                                return [2 /*return*/];
                        }
                    });
                }); })
                    .on('unlink', function (changedFile) { return __awaiter(_this, void 0, void 0, function () {
                    var changedFileMapping, directoryToDelete;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this.WATCH_INITIATED) {
                                    return [2 /*return*/];
                                }
                                if (!POST_REGISTRY.has(changedFile))
                                    return [3 /*break*/, 2];
                                changedFileMapping = POST_REGISTRY.get(changedFile);
                                if (!changedFileMapping)
                                    return [3 /*break*/, 2];
                                directoryToDelete = path.dirname(changedFileMapping);
                                return [4 /*yield*/, this.hay.fileSystem.unlink(directoryToDelete)];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2:
                                this.hay.reporter.finish({ gutter: { styles: ['red'] } })("removed " + changedFile);
                                return [2 /*return*/];
                        }
                    });
                }); })
                    .on('ready', function () {
                    _this.WATCH_INITIATED = true;
                    _this.hay.reporter.log('');
                    _this.hay.reporter.info('waiting for changes..\n');
                });
                return [2 /*return*/];
            });
        });
    };
    PostBuilder.prototype.addOrChange = function (changedFile) {
        return __awaiter(this, void 0, void 0, function () {
            var contents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.hay.fileSystem.readFile(path.resolve(this.config.directory, changedFile))];
                    case 1:
                        contents = _a.sent();
                        return [4 /*yield*/, this.parseFile({
                                fileName: changedFile,
                                contents: contents
                            })];
                    case 2:
                        _a.sent();
                        if (this.hay.server) {
                            this.hay.server.notifyClients(['index.html']);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return PostBuilder;
}(base_1.BaseBuilder));
exports.PostBuilder = PostBuilder;
//# sourceMappingURL=posts.js.map