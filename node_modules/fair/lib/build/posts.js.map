{"version":3,"file":"posts.js","sourceRoot":"","sources":["../../src/build/posts.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\n\nimport * as chokidar from 'chokidar';\nimport { FSWatcher } from 'fs';\n\nimport { BaseBuilder } from './base';\nimport { File, FileInfo } from '../template';\nimport { Hay } from '../hay';\n\nconst FILENAME_DATE_REGEX = /^(\\d{4})-(\\d{2})-(\\d{2})-([-\\w]+?)\\.(\\w+)?$/i;\n\nconst POST_REGISTRY: Map<string, string> = new Map<string, string>();\n\nexport class PostBuilder extends BaseBuilder {\n  public template: string;\n\n  constructor(hay: Hay) {\n    super(hay);\n\n    super.setConfig({\n      name: 'post',\n      directory: hay.config.values.postsDir,\n      fileExtensions: hay.config.values.postExtensions\n    });\n  }\n\n  public async parseFile(file: File): Promise<any> {\n    let info: FileInfo = await this.hay.engine.extractInfo(file);\n\n    let match = FILENAME_DATE_REGEX.exec(file.fileName);\n    if (match) {\n      info.date = new Date(match.slice(1, 4).join('-'));\n\n      if (this.hay.config.values.autoPermalink) {\n        info.output.directory = match[4];\n        info.output.fileName = 'index.html';\n      }\n    } else if (info.options && info.options.date) {\n      info.date = new Date(info.options.date);\n    }\n\n    let parsed: any = await this.hay.engine.compileTemplate(info);\n    let output: string = await parsed.render(info);\n\n    let outputDir: string = path.resolve(this.hay.config.values.destination, info.output.directory);\n\n    POST_REGISTRY.set(file.fileName, path.resolve(outputDir, info.output.fileName));\n\n    await this.hay.fileSystem.mkDir(outputDir);\n    await this.hay.fileSystem.writeFile(\n      path.resolve(outputDir, info.output.fileName),\n      output\n    );\n\n    this.progressBar.tick(`loaded ${file.fileName}`);\n  }\n\n  async removeFile(file: File): Promise<any> {\n    let shortName: string = path.basename(file.fileName);\n  }\n\n  async run(): Promise<any> {\n    let files: File[] = await super.loadFiles();\n\n    this.progressBar.setLength(files.length);\n    this.progressBar.setCategory(`compile posts`);\n    this.progressBar.start();\n\n    return Promise.all(files.map(async (file: File) => await this.parseFile(file)));\n  }\n\n  public finish() {\n    this.hay.reporter.finish(`<green>âœ“</green>  parsed posts`);\n  }\n\n  public async watch() {\n    let watcher: FSWatcher = chokidar.watch(this.config.directory, {\n      ignored: /[\\/\\\\]\\./,\n      persistent: true,\n      cwd: this.config.directory\n    });\n\n    watcher\n      .on('add', async (changedFile: string) => {\n        if (!this.WATCH_INITIATED) {\n          return;\n        }\n        await this.addOrChange(changedFile);\n        this.hay.reporter.finish(`added ${changedFile}`);\n      })\n      .on('change', async (changedFile: string) => {\n        if (!this.WATCH_INITIATED) {\n          return;\n        }\n        await this.addOrChange(changedFile);\n        this.hay.reporter.finish(`updated ${changedFile}`);\n      })\n      .on('unlink', async (changedFile: string) => {\n        if (!this.WATCH_INITIATED) {\n          return;\n        }\n\n        if (POST_REGISTRY.has(changedFile)) {\n          let changedFileMapping =  <string>POST_REGISTRY.get(changedFile);\n\n          if (changedFileMapping) {\n            const directoryToDelete = path.dirname(changedFileMapping);\n            await this.hay.fileSystem.unlink(directoryToDelete);\n          }\n        }\n        this.hay.reporter.finish({ gutter: { styles: ['red'] } })(`removed ${changedFile}`);\n      })\n      .on('ready', () => {\n        this.WATCH_INITIATED = true;\n        this.hay.reporter.log('');\n        this.hay.reporter.info('waiting for changes..\\n');\n      });\n  }\n\n  private async addOrChange(changedFile: string): Promise<void> {\n    let contents: string = await this.hay.fileSystem.readFile(\n      path.resolve(this.config.directory, changedFile)\n    );\n\n    await this.parseFile({\n      fileName: changedFile,\n      contents\n    });\n\n    if (this.hay.server) {\n      this.hay.server.notifyClients(['index.html']);\n    }\n  }\n}\n"]}