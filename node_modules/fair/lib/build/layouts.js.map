{"version":3,"file":"layouts.js","sourceRoot":"","sources":["../../src/build/layouts.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2BAA6B;AAE7B,+BAAqC;AAIrC,IAAM,mBAAmB,GAAG,8CAA8C,CAAC;AAE3E;IAAoC,kCAAW;IAG7C,wBAAY,GAAQ;QAApB,YACE,kBAAM,GAAG,CAAC,SAOX;QALC,iBAAM,SAAS,aAAC;YACd,IAAI,EAAE,QAAQ;YACd,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU;YACvC,cAAc,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB;SACnD,CAAC,CAAC;;IACL,CAAC;IAEY,kCAAS,GAAtB,UAAuB,IAAU;;gBAC3B,IAAI;;;4BAAa,MAAM,eAAA,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,EAAA;;;wBAC5D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;wBACtB,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC;wBAC5B,MAAM,eAAA,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,EAAA;;wBAA3C,UAA4C;;;;;KAC7C;IAEK,mCAAU,GAAhB,UAAiB,IAAU;;gBACrB,SAAS;;4BAAW,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;;;;KACrD;IAEK,4BAAG,GAAT;;;gBACM,KAAK;;;4BAAW,MAAM,eAAA,iBAAM,SAAS,WAAE,EAAA;;;wBAE3C,MAAM,gBAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAO,IAAU;;4CAAK,MAAM,eAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAA;4CAA1B,MAAM,2BAAoB;;qCAAA,CAAC,CAAC,EAAC;;;;KACjF;IAEM,+BAAM,GAAb;QACE,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,yCAAoC,CAAC,CAAC;IACjE,CAAC;IACH,qBAAC;AAAD,CAAC,AAjCD,CAAoC,kBAAW,GAiC9C;AAjCY,wCAAc","sourcesContent":["import * as path from 'path';\n\nimport { BaseBuilder } from './base';\nimport { File, FileInfo } from '../template';\nimport { Hay } from '../hay';\n\nconst FILENAME_DATE_REGEX = /^(\\d{4})-(\\d{2})-(\\d{2})-([-\\w]+?)\\.(\\w+)?$/i;\n\nexport class LayoutsBuilder extends BaseBuilder {\n  public template: string;\n\n  constructor(hay: Hay) {\n    super(hay);\n\n    super.setConfig({\n      name: 'layout',\n      directory: hay.config.values.layoutsDir,\n      fileExtensions: hay.config.values.layoutExtensions\n    });\n  }\n\n  public async parseFile(file: File): Promise<any> {\n    let info: FileInfo = await this.hay.engine.extractInfo(file);\n    info.noCompile = true;\n    info.namespace = 'layouts:';\n    await this.hay.engine.compileTemplate(info);\n  }\n\n  async removeFile(file: File): Promise<any> {\n    let shortName: string = path.basename(file.fileName);\n  }\n\n  async run(): Promise<any> {\n    let files: File[] = await super.loadFiles();\n\n    return Promise.all(files.map(async (file: File) => await this.parseFile(file)));\n  }\n\n  public finish() {\n    this.hay.reporter.finish(`<green>âœ“</green>  compiled layouts`);\n  }\n}\n"]}